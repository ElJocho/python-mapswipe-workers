version: '3'
networks:
    mapswipe_network:
        driver: bridge
        ipam:
            config: [{subnet: 172.20.0.0/16}]
    api:
    manager_dashboard:
    mapswipe_workers:
    postgres:

services:
    nginx:
        container_name: nginx
        build:
            context: nginx/
        volumes:
            - /etc/letsencrypt/:/etc/letsencrypt/:ro
        restart: unless-stopped
        ports:
            - '80:80'
            - '443:443'
        networks:
            - mapswipe_network
            - api
            - manager_dashboard

    api:
        container_name: api
        build:
            context: api/
        volumes:
            - ./api-data:/usr/share/nginx/html/api/:ro
        restart: unless-stopped
        expose:
            - "80"
        networks:
            - api

    manager_dashboard:
        container_name: manager_dashboard
        build:
            context: manager_dashboard/
        restart: unless-stopped
        expose:
            - "80"
        networks:
            - manager_dashboard

    mapswipe_workers:
        container_name: mapswipe_workers
        build:
            context: mapswipe_workers/
        depends_on:
            - postgres
        command: mapswipe_workers --verbose run --schedule m --only_new_results
        volumes:
            - ./api-data:/var/lib/mapswipe_workers/api-data/:rw
            - ./api-data/agg_res_by_task_id:/var/lib/mapswipe_workers/api-data/agg_results:rw
            - ./api-data/agg_res_by_task_id:/var/lib/mapswipe_workers/api-data/groups:rw
            - ./api-data/agg_res_by_task_id:/var/lib/mapswipe_workers/api-data/history:rw
            - ./api-data/agg_res_by_task_id:/var/lib/mapswipe_workers/api-data/projects:rw
            - ./api-data/agg_res_by_task_id:/var/lib/mapswipe_workers/api-data/results:rw
            - ./api-data/agg_res_by_task_id:/var/lib/mapswipe_workers/api-data/tasks:rw
        restart: "no"
        networks:
            - mapswipe_workers
            - postgres

    postgres:
        container_name: postgres
        build:
            context: postgres/
        environment:
            POSTGERS_PASSWORD: '${POSTGRES_PASSWORD}'
            POSTGRES_USER: 'mapswipe_workers'
            POSTGRES_DB: 'mapswipe'
            WALG_GS_PREFIX: '${WALG_GS_PREFIX}'
            GOOGLE_APPLICATION_CREDENTIALS: '/serviceAccountKey.json'
        # Set options for WAL-G (backup tool)
        command: postgres -c archive_mode=on -c archive_timeout=60 -c archive_command="/archive_command.sh %p"
        volumes:
            - ./postgres-data:/var/lib/postgresql/data
        restart: unless-stopped
        ports:
          - "5432:5432"
        networks:
            - postgres

    postgres_restore_backup:
        container_name: postgres_restore_backup
        build:
            context: postgres/
            dockerfile: Dockerfile-restore_backup
            args:
                WALG_GS_PREFIX: '${WALG_GS_PREFIX}'
                GOOGLE_APPLICATION_CREDENTIALS: '/serviceAccountKey.json'
        environment:
            POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
            POSTGRES_USER: 'mapswipe_workers'
            POSTGRES_DB: 'mapswipe'
        command: postgres
        volumes:
            - ./postgres-data:/var/lib/postgresql/restored_cluster
        ports:
          - "5432:5432"

    firebase_deploy:
        container_name: firebase_deploy
        build:
            context: firebase/
        environment:
            FIREBASE_TOKEN: '${FIREBASE_TOKEN}'
        command: firebase deploy --token $FIREBASE_TOKEN --only functions,database:rules
        volumes:
            - ./firebase:/firebase
